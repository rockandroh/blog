theme_get()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
theme_gray()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
theme_light()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
theme_replace()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
theme_test()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange') +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = "loess") +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = "loess") +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = 'lm') +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALS) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 3), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 4), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
#geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
geom_line(aes(x=4))
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
geom_line(x=4)
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
geom_abline(x=4)+
#geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
geom_abline(h=4)+
#geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
geom_vline(x=4)+
#geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
geom_vline(aes(x=4))+
#geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
library(ggplot2)
df[2:nrow(df),]%>%
ggplot(., aes(x=Q)) +
geom_line(aes(y=P), col='blue') +
geom_line(aes(y=MR), col='red') +
geom_line(aes(y=TR), col='orange') +
geom_vline(xintercept = 4)+
#geom_smooth(aes(y=TR), col='orange', method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
wd = "G:/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-12"
fn = list.files(path = wd,
pattern = '.*stocks_trade.*.*_15.*\\.csv') # 마지막 30분 틱데이터 가지고오기
path = paste(wd,fn,sep = '/')
data = readr::read_csv(file = path,
col_names = c('code','trade_date','timestamp','price','open','high','low',
'size','cum_size','ask1','bid1'))
sum(is.na(data))
blogdown:::preview_site(startup = TRUE)
x = seq(5, 10, 100)
x
x = seq(5, 10, length.out = 100)
x
blogdown:::new_post_addin()
library(dplyr)
library(tidyverse)
library(DT)
library(reticulate) # Python
#py_install(packages = "matplotlib")
#py_install(packages = "pandas")
#py_install(packages = 'dfply')
options(scipen=999)
options(max.print = 99999999)
options(digits=10)
wd = "G:/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-14"
wd2 = "/Volumes/GoogleDrive/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-18"
fn = list.files(path = wd2,
pattern = '.*stocks_trade.*\\.csv') # 마지막 30분 틱데이터 가지고오기
path = paste(wd2,fn,sep = '/')
# data = readr::read_csv(file = path,
#                        col_names = c('code','trade_date','timestamp','price','open','high','low',
#                                      'size','cum_size','ask1','bid1'))
tbl =
list.files(path = wd2, pattern = '.*stocks_trade.*\\.csv') %>%
map_df(~readr::read_csv(paste(wd2,.,sep = '/'),
col_names = c('code','trade_date','timestamp','price','open','high','low',
'size','cum_size','ask1','bid1') ))
sum(is.na(tbl))
rm(list = "tbl")
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site()
wd = "G:/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-14"
wd2 = "/Volumes/GoogleDrive/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-18"
fn = list.files(path = wd2,
pattern = '.*stocks_trade.*\\.csv') # 마지막 30분 틱데이터 가지고오기
path = paste(wd2,fn,sep = '/')
# data = readr::read_csv(file = path,
#                        col_names = c('code','trade_date','timestamp','price','open','high','low',
#                                      'size','cum_size','ask1','bid1'))
tbl =
list.files(path = wd2, pattern = '.*stocks_trade.*\\.csv') %>%
map_df(~readr::read_csv(paste(wd2,.,sep = '/'),
col_names = c('code','trade_date','timestamp','price','open','high','low',
'size','cum_size','ask1','bid1') ))
library(dplyr)
library(tidyverse)
library(DT)
library(reticulate) # Python
#py_install(packages = "matplotlib")
#py_install(packages = "pandas")
#py_install(packages = 'dfply')
options(scipen=999)
options(max.print = 99999999)
options(digits=10)
wd = "G:/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-14"
wd2 = "/Volumes/GoogleDrive/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-18"
fn = list.files(path = wd2,
pattern = '.*stocks_trade.*\\.csv') # 마지막 30분 틱데이터 가지고오기
path = paste(wd2,fn,sep = '/')
# data = readr::read_csv(file = path,
#                        col_names = c('code','trade_date','timestamp','price','open','high','low',
#                                      'size','cum_size','ask1','bid1'))
tbl =
list.files(path = wd2, pattern = '.*stocks_trade.*\\.csv') %>%
map_df(~readr::read_csv(paste(wd2,.,sep = '/'),
col_names = c('code','trade_date','timestamp','price','open','high','low',
'size','cum_size','ask1','bid1') ))
sum(is.na(tbl))
blogdown:::preview_site()
blogdown:::preview_site()
wd2 = "/Volumes/GoogleDrive/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-18"
fn = list.files(path = wd2,
pattern = '.*stocks_trade.*\\.csv') # 마지막 30분 틱데이터 가지고오기
path = paste(wd2,fn[1:4],sep = '/')
path
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
library(dplyr)
library(tidyverse)
library(DT)
library(reticulate) # Python
#py_install(packages = "matplotlib")
#py_install(packages = "pandas")
#py_install(packages = 'dfply')
library(highfrequency)
options(scipen=999)
options(max.print = 99999999)
options(digits=10)
wd_win = "G:/공유 드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-26"
wd_mac = "/Volumes/GoogleDrive/공유드라이브/Project_TBD/Stock_Data/real_time/kiwoom_stocks/2021-01-26"
tbl =
list.files(path = wd_win, pattern = '.*stocks_trade.*\\.csv') %>%
map_df(~readr::read_csv(paste(wd_win,.,sep = '/'),
col_names = c('code','trade_date','timestamp','price','open','high','low','size','cum_size','ask1','bid1','rotation','bs_ratio', 'mkt_type', 'mkt_cap'),
col_types = cols(.default="d", code = "c")
)
)
sum(is.na(tbl))
gc()
dim(tbl)
head(tbl)
df =
tbl %>%
filter(mkt_type==2) %>%
select('code','timestamp','price','size','ask1','bid1','mkt_type') %>%
mutate_at(vars(timestamp), function(x) x*1000) %>%
mutate_at(vars(code), function(x) paste0('KR',x)) %>%
arrange(.,timestamp) %>%
mutate(DATE = paste(substr(as.character(timestamp),1,4),
substr(as.character(timestamp),5,6),
substr(as.character(timestamp),7,8),
sep ="-"
)) %>%
mutate(TIME = paste(substr(as.character(timestamp),9,10),
substr(as.character(timestamp),11,12),
paste(substr(as.character(timestamp),13,14),
substr(as.character(timestamp),15,18),
sep='.'),
sep =":"
)) %>%
rename(SYMBOL = code) %>%
rename(BID = bid1) %>%
rename(OFR = ask1) %>%
rename(SIZE = size) %>%
rename(PRICE = price) %>%
select(!timestamp) %>%
relocate(DATE, TIME, SYMBOL, PRICE, SIZE, BID, OFR)
head(df)
gc()
head(df)
rm(list = "tbl")
gc()
library(rvest)
library(httr)
data = list()
# i = 0 은 코스피, i = 1 은 코스닥 종목
for (i in 0:1) {
ticker = list()
url =
paste0('https://finance.naver.com/sise/',
'sise_market_sum.nhn?sosok=',i,'&page=1')
down_table = GET(url)
# 최종 페이지 번호 찾아주기
navi.final = read_html(down_table, encoding = "EUC-KR") %>%
html_nodes(., ".pgRR") %>%
html_nodes(., "a") %>%
html_attr(.,"href") %>%
strsplit(., "=") %>%
unlist() %>%
tail(., 1) %>%
as.numeric()
# 첫번째 부터 마지막 페이지까지 for loop를 이용하여 테이블 추출하기
for (j in 1:navi.final) {
# 각 페이지에 해당하는 url 생성
url = paste0(
'https://finance.naver.com/sise/',
'sise_market_sum.nhn?sosok=',i,"&page=",j)
down_table = GET(url)
Sys.setlocale("LC_ALL", "English")
# 한글 오류 방지를 위해 영어로 로케일 언어 변경
table = read_html(down_table, encoding = "EUC-KR") %>%
html_table(fill = TRUE)
table = table[[2]] # 원하는 테이블 추출
Sys.setlocale("LC_ALL", "Korean")
# 한글을 읽기위해 로케일 언어 재변경
table[, ncol(table)] = NULL # 토론식 부분 삭제
table = na.omit(table) # 빈 행 삭제
# 6자리 티커만 추출
symbol = read_html(down_table, encoding = "EUC-KR") %>%
html_nodes(., "tbody") %>%
html_nodes(., "td") %>%
html_nodes(., "a") %>%
html_attr(., "href")
symbol = sapply(symbol, function(x) {
str_sub(x, -6, -1)
})
symbol = unique(symbol)
# 테이블에 티커 넣어준 후, 테이블 정리
table$N = paste0('KR',symbol)
colnames(table)[1] = "종목코드"
rownames(table) = NULL
ticker[[j]] = table
Sys.sleep(0.5) # 페이지 당 0.5초의 슬립 적용
}
# do.call을 통해 리스트를 데이터 프레임으로 묶기
ticker = do.call(rbind, ticker)
data[[i + 1]] = ticker
}
# 코스피와 코스닥 테이블 묶기
ticker_info = do.call(rbind, data)
head(ticker_info)
ticker_info
data = ticker_info
datas = split(data, data$종목코드)
head(datas)
datas$KR000020
datas[[KR000020]]
datas[KR000020]
datas[['KR000020]]
]
datas[['KR000020']]
datas[['KR000020']]['종목명','시가총액','외국인비율']
datas[['KR000020']][c('종목명','시가총액','외국인비율')]
dfs = split(df, df$SYMBOL)
datas = split(data, data$종목코드)
head(datas)
dest = "G:/공유 드라이브/Project_TBD/Stock_Data/Symbol"
for (dn in names(dfs)){
dir.create(paste(dest,dn,sep = "/"))
sub_dfs <- split(dfs[[dn]], dfs[[dn]]$DATE)
for (fn in names(sub_dfs)){
write.csv(sub_dfs[[fn]], file.path(dn, paste0(fn, ".csv")))
write.csv(datas[[dn]], file.path(dn, paste0('info', ".csv")))
}
}
names(dfs)[1]
dn = names(dfs)[1]
sub_dfs <- split(dfs[[dn]], dfs[[dn]]$DATE)
sub_dfs
fn = names(sub_dfs)
fn
sub_dfs[[fn]]
dn
file.path(dn, paste0(fn, ".csv"))
file.path(outout_loc, paste0(fn, ".csv"))
output_loc = dir.create(paste(dest,dn,sep = "/"))
output_loc
output_loc = paste(dest,dn,sep = "/")
output_loc
head(datas)
dest = "G:/공유 드라이브/Project_TBD/Stock_Data/Symbol"
for (dn in names(dfs)){
output_loc = paste(dest,dn,sep = "/")
dir.create(paste(dest,dn,sep = "/"))
sub_dfs <- split(dfs[[dn]], dfs[[dn]]$DATE)
for (fn in names(sub_dfs)){
write.csv(sub_dfs[[fn]], file.path(output_loc, paste0(fn, ".csv")))
write.csv(datas[[dn]], file.path(output_loc, paste0('info', ".csv")))
}
}
info_loc = paste(dest,dn,'info',sep='/')
output_loc = paste(dest,dn,'tick',sep = "/")
paste(dest,dn,sep = "/")
paste(dest,dn,'tick',sep = "/")
paste(dest,dn,'info',sep='/')
dfs = split(df, df$SYMBOL)
datas = split(data, data$종목코드)
dest = "G:/공유 드라이브/Project_TBD/Stock_Data/Symbol"
for (dn in names(dfs)){
output_loc = paste(dest,dn,'tick',sep = "/")
info_loc = paste(dest,dn,'info',sep='/')
dir.create(paste(dest,dn,sep = "/"))
dir.create(paste(dest,dn,'tick',sep = "/"))
dir.create(paste(dest,dn,'info',sep='/'))
sub_dfs <- split(dfs[[dn]], dfs[[dn]]$DATE)
for (fn in names(sub_dfs)){
write.csv(sub_dfs[[fn]], file.path(output_loc, paste0(fn, ".csv")))
write.csv(datas[[dn]], file.path(output_loc, paste0('info', ".csv")))
}
}
dfs = split(df, df$SYMBOL)
datas = split(data, data$종목코드)
dest = "G:/공유 드라이브/Project_TBD/Stock_Data/Symbol"
for (dn in names(dfs)){
output_loc = paste(dest,dn,'tick',sep = "/")
info_loc = paste(dest,dn,'info',sep='/')
dir.create(paste(dest,dn,sep = "/"))
dir.create(paste(dest,dn,'tick',sep = "/"))
dir.create(paste(dest,dn,'info',sep='/'))
sub_dfs <- split(dfs[[dn]], dfs[[dn]]$DATE)
for (fn in names(sub_dfs)){
write.csv(sub_dfs[[fn]], file.path(output_loc, paste0(fn, ".csv")))
write.csv(datas[[dn]], file.path(info_loc, paste0(fn, ".csv")))
}
}
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
wd_win = "G:/공유 드라이브/Project_TBD/Stock_Data/Stock_Data/Misc"
wd_mac = "/Volumes/GoogleDrive/공유 드라이브/Project_TBD/Stock_Data/Misc"
fn = list.files(path=wd_win, pattern = '.csv')
trades = read.csv(paste(wd_win,fn[2],sep='/'))
fn
wd_win = "G:/공유 드라이브/Project_TBD/Stock_Data/Stock_Data/Misc"
fn = list.files(path=wd_win, pattern = '.csv')
fn
wd_win = "G:/공유 드라이브/Project_TBD/Stock_Data/Stock_Data/Misc"
wd_mac = "/Volumes/GoogleDrive/공유 드라이브/Project_TBD/Stock_Data/Misc"
fn = list.files(path=wd_win, pattern = '.csv')
fn
trades = read.csv(paste(wd_win,fn[2],sep='/'))
fn
list.files(path=wd_win, pattern = '.csv')
wd_win = "G:/공유 드라이브/Project_TBD/Stock_Data/Misc"
wd_win = "G:/공유 드라이브/Project_TBD/Stock_Data/Misc"
wd_mac = "/Volumes/GoogleDrive/공유 드라이브/Project_TBD/Stock_Data/Misc"
fn = list.files(path=wd_win, pattern = '.csv')
trades = read.csv(paste(wd_win,fn[2],sep='/'))
quotes = read.csv(paste(wd_win,fn[1],sep='/'))
dim(trades)
dim(quotes)
head(trades)
head(quotes)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::build_site()

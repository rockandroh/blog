weeknames.size = 3,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'lightblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=11, title.size = 10,
day.size = 3,
weeknames.size = 3,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=11, title.size = 10,
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=11, title.size = 10,
day.size = 4,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=11, title.size = 10,
day.size = 4,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = -1
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=11, title.size = 10,
day.size = 4,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=11, title.size = 10,
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=10, title.size = 10,
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=10, title.size = 10,
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 0, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=10, title.size = 10,
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=10, title.size = 10,
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0,
lunar = TRUE
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=10, title.size = 10,
subtitle = "Have a nice day",
subtitle.col = 'Pink',
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=10, title.size = 10,
subtitle = "Have a nice day",
subtitle.col = 'Green',
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
#install.packages('calendR')
library(calendR)
calendR(year = 2020, month=10, title.size = 10,
subtitle = "Have a nice day",
subtitle.col = 'Blue',
day.size = 3,
weeknames.size = 4,
weeknames.col = 'blue',
weeknames = c('Mon','Tue','Wed','Thu','Fri','Sat','Sun'),
start = 'M',
special.days = 'weekend',
special.col = 'skyblue',
lty = 1, margin = 0
)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::preview_site()
(3>=2)+5
!!3
!!3
!!3
1|3
!!
3
3.20E10
3exp8
3exp(8)
exp(8)
pow(2.0,3.0)
(3>=2)+5
pow(2.0,3.0)
Rcpp::sourceCpp()
Rcpp::sourceCpp(timesTwo(42))
Rcpp::sourceCpp('~/Downloads/cpp test.cpp')
blogdown::stop_server()
blogdown::stop_server()
blogdown:::new_post_addin()
X = rnorm(1e5, 1, 2)
mean(X)
set.seed(1234)
X = rnorm(1e5, 1, 2)
X2 = X^2
mean(X2)
set.seed(1234)
mu = 0
sigma = 2
X = rnorm(1e5, mu, sigma)
X2 = X^2
mean(X)
mean(X2)
mean(X)
mean(X2)
mean(X2). Var(X2)
set.seed(1234)
mu = 0
sigma = 2
X = rnorm(1e5, mu, sigma)
X2 = X^2
mean(X2). Var(X2)
mean(X2); Var(X2)
mean(X2); var(X2)
exp(-1000)
exp(-1000)/(exp(-1000)+exp(-1001)
exp(-1000)/(exp(-1000)+exp(-1001))
1/(1+exp)
1/(1+exp())
1/(1+exp(1))
1/(1+exp(-1))
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::new_post_addin()
blogdown:::preview_site()
library(purr)
library(purrr)
install.packages("tidyverse")
install.packages("lubridate")
install.packages("lubridate")
install.packages("readxl")
install.packages("lubridate")
install.packages("readxl")
install.packages("highcharter")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("timetk")
install.packages("tibbletime")
install.packages("quantmod")
install.packages("PerformanceAnalytics")
install.packages("scales")
library(tidyverse)
library(tidyverse)
library(lubridate)
library(readxl)
library(highcharter)
library(tidyquant)
library(timetk)
library(timetk)
library(tibbletime)
library(tidyquant)
library(timetk)
library(tibbletime)
library(quantmod)
library(PerformanceAnalytics)
library(scales)
# install.packages("tidyverse")
# install.packages("lubridate")
# install.packages("readxl")
# install.packages("highcharter")
# install.packages("tidyquant")
# install.packages("timetk")
# install.packages("tibbletime")
# install.packages("quantmod")
# install.packages("PerformanceAnalytics")
# install.packages("scales")
library(tidyverse)
library(lubridate)
library(readxl)
library(highcharter)
library(tidyquant)
library(timetk)
library(tibbletime)
library(quantmod)
library(PerformanceAnalytics)
library(scales)
library(purrr)
symbols = c('SPY','EFA','IJS','EEM','AGG')
prices =
getSymbols(symbols,
src = 'yahoo',
from = '2012-12-31',
to = '2017-12-31',
auto.assign = TRUE,
warnings = FALSE) %>%
mpa(~Ad((get(.)))) %>%
reduce(merge) %>%
'colnames<-'(symbols)
library(purrr)
symbols = c('SPY','EFA','IJS','EEM','AGG')
prices =
getSymbols(symbols,
src = 'yahoo',
from = '2012-12-31',
to = '2017-12-31',
auto.assign = TRUE,
warnings = FALSE) %>%
map(~Ad((get(.)))) %>%
reduce(merge) %>%
'colnames<-'(symbols)
prices
library(purrr)
symbols = c('SPY','EFA','IJS','EEM','AGG')
prices =
getSymbols(symbols,
src = 'yahoo',
from = '2012-12-31',
to = '2017-12-31',
auto.assign = TRUE,
warnings = FALSE) %>%
map(~Ad((get(.)))) %>% # get adjusted price from each of our individual price series
reduce(merge) %>% # looks for the date index shared by our objects and uses that index to align the data
'colnames<-'(symbols) # rename the columns according to the symbols object
head(price)
library(purrr)
symbols = c('SPY','EFA','IJS','EEM','AGG')
prices =
getSymbols(symbols,
src = 'yahoo',
from = '2012-12-31',
to = '2017-12-31',
auto.assign = TRUE,
warnings = FALSE) %>%
map(~Ad((get(.)))) %>% # get adjusted price from each of our individual price series
reduce(merge) %>% # looks for the date index shared by our objects and uses that index to align the data
'colnames<-'(symbols) # rename the columns according to the symbols object
head(prices)
1:10 %>% map(function(x) rnorm(5, mean=x)
1:10 %>% map(function(x) rnorm(5, mean=x))
1:10 %>% map(function(x) rnorm(5, mean=x, sd=1))
1:3 %>% map(function(x) rnorm(5, mean=x, sd=1))
1:3 %>% map(~ .x**2)
source('~/.active-rstudio-document', echo=TRUE)
xy <- merge(dtest, dtest2, by.x = 1, by.y = 1, all.x = TRUE, all.y = TRUE)
xy
dtest
dtest2
cumsum(1:5)
reduce(.x=1:6, f='+', accumulate=TRUE)
reduce(.x=1:6, .f='+', accumulate=TRUE)
reduce(.x=1:6, .f="+", accumulate=TRUE)
reduce(x=1:6, f="+", accumulate=TRUE)
Reduce(x=1:6, f="+", accumulate=TRUE)
Reduce(x=1:6, f="+")
Reduce(x=1:6, f="+", accumulate = TRUE)
Reduce(x=1:5, f="+", accumulate = TRUE)
Reduce(x=1:5, f="+")
Reduce(x=1:5, f="+", accumulate = TRUE)
library(expm)
P_power = lapply(0:5, function(k) P %^% k)
P = rbind(c(0.9,0.1),c(1,0))
library(expm)
P_power = lapply(0:5, function(k) P %^% k)
P_power
P_power = lapply(0:10, function(k) P %^% k)
head(P_power)
reduce(P_power, f="+")
Reduce(P_power, f="+")
P <- matrix(c(0, 0.1, 0.9, 0.2, 0.5, 0.3, 0, 0.5, 0.5), ncol = 3, byrow = T);
P
x_0 <- 2
K <- 100000
newstate <- function(oldstate,u) {
which.min(u>cumsum(P[oldstate,]))
}
x_1 <- newstate(x_0, runif(1))
x_1
cumsum(P[2,])
runif(1)
runif(1)>cumsum(P[2,])
which.min(runif(1)>cumsum(P[2,]))
which.min(runif(1)>cumsum(P[2,]))
which.min(runif(1)>cumsum(P[2,]))
which.min(runif(1)>cumsum(P[2,]))
which.min(runif(1)>cumsum(P[2,]))
which.min(runif(1)>cumsum(P[2,]))
which.min(runif(1)>cumsum(P[2,]))
which.min(runif(1)>cumsum(P[2,]));runif(1)>cumsum(P[2,])
which.min(runif(1)>cumsum(P[2,]));runif(1)>cumsum(P[2,])
which.min(runif(1)>cumsum(P[2,]));runif(1)>cumsum(P[2,]);runif(1);cumsum(P[2,])
which.min(runif(1)>cumsum(P[2,]));runif(1)>cumsum(P[2,]);runif(1);cumsum(P[2,])
newstate <- function(oldstate,u) {
print(u)
print(cumsum(P[oldstate,]))
which.min(u>cumsum(P[oldstate,]))
}
x_1 <- newstate(x_0, runif(1))
x_1
P
P <- matrix(c(0, 0.1, 0.9, 0.2, 0.5, 0.3, 0, 0.5, 0.5), ncol = 3, byrow = T);
P
x_0 <- 2
K <- 100000
newstate <- function(oldstate,u) {
print(u)
print(cumsum(P[oldstate,]))
which.min(u>cumsum(P[oldstate,]))
}
x_1 <- newstate(x_0, runif(1))
x_1
x_1 = newstate(x_0, runif(1)); x1
x_1 = newstate(x_0, runif(1)); x_1
newstate <- function(oldstate,u) {
which.min(u>cumsum(P[oldstate,]))
}
x_1 = newstate(x_0, runif(1)); x_1
x_2 = newstate(x_1, runif(1)); x_2
x_1 = newstate(x_0, runif(1)); x_1
x_2 = newstate(x_1, runif(1)); x_2
x_1 = newstate(x_0, runif(1)); x_1
x_2 = newstate(x_1, runif(1)); x_2
x_1 = newstate(x_0, runif(1)); x_1
x_2 = newstate(x_1, runif(1)); x_2
P
mc_without_loop = Reduce(newstate, c(x_0,runif(K)), accumulate = TRUE)
mc_without_loop
mc_without_loop = Reduce(newstate, c(x_0,runif(K)))
mc_without_loop
x_0
newstate(x_1, runif(1))
runif(100)
mc_without_loop = Reduce(newstate, c(x_0,runif(K)),accumulate = TRUE)
mc_without_loop = Reduce(newstate, c(x_0,runif(K)),accumulate = TRUE)
mc_without_loop
length(mc_without_loop)
table(mc_without_loop)
table(rpois(100,5))
table(rpois(100,1))
table(rpois(100,0.1))
K = 100
mc_without_loop = Reduce(newstate, c(x_0,runif(K)),accumulate = TRUE)
mc_without_loop
# Distribution of states:
table(mc_without_loop)/length(mc_without_loop)
K = 10000
mc_without_loop = Reduce(newstate, c(x_0,runif(K)),accumulate = TRUE)
mc_without_loop
# Distribution of states:
table(mc_without_loop)/length(mc_without_loop)
K = 1000
mc_without_loop = Reduce(newstate, c(x_0,runif(K)),accumulate = TRUE)
mc_without_loop
# Distribution of states:
table(mc_without_loop)/length(mc_without_loop)
K = 1000
mc_without_loop = Reduce(newstate, c(x_0,runif(K)),accumulate = TRUE)
mc_without_loop
# Distribution of states:
table(mc_without_loop)/length(mc_without_loop)
set.seed(1)
K = 500
mc_without_loop = Reduce(newstate, c(x_0,runif(K)),accumulate = TRUE)
mc_without_loop
# Distribution of states:
table(mc_without_loop)/length(mc_without_loop)
getwd()
blogdown:::preview_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::preview_site()
head(prices)
prices_monthyl = to.monthly(prices,
indexAt = 'lastof',
OHLC=FALSE)
prices_monthyl
prices_month_last = to.monthly(prices,
indexAt = 'lastof',
OHLC=FALSE)
prices_month_last
head(prices_month_last)
prices_month_first = to.monthly(prices,
indexAt = 'firstof',
OHLC=FALSE)
head(prices_month_first)
prices_month_avg = to.monthly(prices,
indexAt = 'mean')
prices_month_avg
prices_month_avg = apply.monthly(prices, mean)
prices_month_avg
head(prices_month_avg)
head(prices)
asset_returns_xts =
Return.calculate(prices_month_last,
method = 'log') %>%
na.omit()
head(asset_returns_xts,3)
asset
library(DSR)
install.packages('DSR')
library(DSR)
install.packages('DSR')
devtools::install_github("garrettgman/DSR")
#devtools::install_github("garrettgman/DSR")
library(DSR)
table1
table1
table1; table2; table3;
table1
print(table1)
table1$cases/table1$population *10000
table2
table3
spread(table2,key,value)
table4
gather(table4, 'year', 'cases', 2:3)

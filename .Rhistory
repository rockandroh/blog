}
dim(bs_sample_mat)
bs_sample_median_vec = apply(bs_sample_mat_mat, 2, median)
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
print(bs_sample_median_vec)
sample_median_vec = median(bs_sample_mat)
print(sample_median_vec)
print("Bootstrap sample median vector: %s", bs_sample_median_vec)
print("Bootstrap sample median vector: %d", bs_sample_median_vec)
printf("Bootstrap sample median vector: %d", bs_sample_median_vec)
printf("Bootstrap sample median vector: %f", bs_sample_median_vec)
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
print("Bootstrap sample median vector: \n")
print(bs_sample_median_vec)
sample_median_vec = median(bs_sample_mat)
print(sample_median_vec)
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
print("Bootstrap sample median vector: "\n)
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
print("Bootstrap sample median vector: /n")
print(bs_sample_median_vec)
sample_median_vec = median(bs_sample_mat)
print(sample_median_vec)
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
printf("Bootstrap sample median vector: \n")
print(bs_sample_median_vec)
sample_median_vec = median(bs_sample_mat)
print(sample_median_vec)
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
printf("Median vector of Bootstrap sample: \n")
print(bs_sample_median_vec)
sample_median_vec = median(bs_sample_mat)
printf("Sample median of orignal data: \n")
print(sample_median_vec)
printf = function(...) cat(sprintf(...))
alpha = 0.05
left = median(mpg) - qnorm(1-alpha/2)*sqrt(bs_est_var)
sample_variance = function(x){(1/(length(x)-1))*sum((x-mean(x))^2)}
bs_est_var = sample_variance(median_vec)
printf("Bootstrap estimate of the variance is: %.2f", sample_variance(bs_est_var))
bs_MSE = (1/length(bs_median_vec))*sum((bs_median_median_vec - median(mpg))^2)
sample_variance = function(x){(1/(length(x)-1))*sum((x-mean(x))^2)}
bs_est_var = sample_variance(bs_sample_median_vec)
printf("Bootstrap estimate of the variance is: %.2f", sample_variance(bs_est_var))
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
printf("Median vector of Bootstrap sample: \n")
print(bs_sample_median_vec)
sample_median_vec = median(bs_sample_mat)
printf("Sample median of orignal data: \n")
print(sample_median_vec)
sample_variance = function(x){(1/(length(x)-1))*sum((x-mean(x))^2)}
bs_est_var = sample_variance(bs_sample_median_vec)
printf("Bootstrap estimate of the variance is: %.2f", sample_variance(bs_est_var))
sample_variance = function(x){(1/(length(x)-1))*sum((x-mean(x))^2)}
bs_est_var = sample_variance(bs_sample_median_vec)
printf("Bootstrap estimate of the variance is: %.2f", bs_est_var)
bs_MSE = (1/length(bs_median_vec))*sum((bs_median_median_vec - median(mpg))^2)
bs_MSE = (1/length(bs_median_vec))*sum((bs_sample_median_vec - median(mpg))^2)
bs_MSE = (1/length(bs_sample_median_vec))*sum((bs_sample_median_vec - median(mpg))^2)
printf("Bootstrap estimate of MSE is: %.2f", bs_MSE)
printf = function(...) cat(sprintf(...))
alpha = 0.05
left = median(mpg) - qnorm(1-alpha/2)*sqrt(bs_est_var)
right = median(mpg) + qnorm(1-alpha/2)*sqrt(bs_est_var)
printf("CI Interval: [%.3f, %.3f]", left, right)
bs_sample_median_vec = apply(bs_sample_mat, 2, median)
printf("Median vector of Bootstrap sample: \n")
print(bs_sample_median_vec)
sample_median_vec = median(mpg)
printf("Sample median of orignal data: \n")
print(sample_median_vec)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
ecdf_mpg = ecdf(mpg)
plot(ecdf_mpg, xlab = 'x', ylab = 'Fn(x)', main = 'Empirical cdf', col='lightblue2')
ecdf_mpg = ecdf(mpg)
plot(ecdf_mpg, xlab = 'x', ylab = 'Fn(x)', main = 'Empirical cdf', col='lightblue1')
ecdf_mpg = ecdf(mpg)
plot(ecdf_mpg, xlab = 'x', ylab = 'Fn(x)', main = 'Empirical cdf', col='blue')
ecdf_mpg = ecdf(mpg)
plot(ecdf_mpg, xlab = 'x', ylab = 'Fn(x)', main = 'Empirical cdf', col='blue')
blogdown:::preview_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::preview_site()
hist(mpg)
mpg
hist(mpg,breaks = 1)
hist(mpg,breaks = 20)
hist(mpg,breaks = length(mpg))
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::preview_site()
blogdown:::stop_server()
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::preview_site()
!p
p = TRUE
q = TRUE
!p
!p, !q
p = TRUE
q = TRUE
!p; !q
p = c(TRUE, FALSE, 0, 1)
q = c(FALSE, TRUE, FALSE, TRUE)
!p; !q
p = c(TRUE, FALSE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
!p; !q
p = c(TRUE, FALSE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p; !p
p&q
p&q
p&&p
p
p&q # Element-wise logical AND
p = c(TRUE, FALSE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&&p
p&!p
p = c(TRUE, FALSE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&!q
p&&p
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&!q
p&&p
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&!q
p&&q
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&!q
p&&q
q&&q
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&!q
p&&q
q&&q
p&&p
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE, FALSE)
p
!p # NOT
p&q # Element-wise logical AND, produces result having length of the longer operand
p&!q # El
p&&q
q&&q
p&&p
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND, produces result having length of the longer operand
p&!q # El
p&&q
q&&q
p&&p
p = c(TRUE, TRUE, 0, 1, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&!q
p&&q # Examines only the first element of the operands resulting into a single length logical vector
q&&q
p&&p
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
p&q # Element-wise logical AND
p&!q
p&&q # Examines only the first element of the operands resulting into a single length logical vector
q&&q
p&&p
# Element-wise logical OR
p|q
#
p||q
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
p
!p # NOT
# Element-wise logical AND (&)
p&q
p&!q
# Examines only the first element of the operands resulting into a single length logical vector
p&&q
q&&q
p&&p
# Element-wise logical OR (|)
p|q
#
p||q
!p||q
# Element-wise exclusive OR
xor(p,q)
# Element-wise exclusive OR
xor(p,q)
isTRUE(1)
p = c(TRUE, TRUE, 0, 1)
q = c(FALSE, FALSE, FALSE, TRUE)
isTRUE(1)
isTRUE(0)
!p # NOT
# Element-wise logical AND (&)
p&q
p&!q
# Element-wise logical OR (|)
p|q
# Element-wise exclusive OR
xor(p,q)
# Logical AND
# Examines only the first element of the operands resulting into a single length logical vector
p&&q
q&&q
p&&p
# Logical OR
# Examines only the first element of the operands resulting into a single length logical vector
p||q
!p||q
isTRUE(1)
isTRUE(TRUE)
isTRUE(1)
isTRUE(0)
isTRUE(1)
isTRUE(0)
isTRUE(TRUE)
p = c(TRUE, TRUE, FALSE, FALSE)
q = c(TRUE, FALSE, TRUE, FALSE)
isTRUE(FALSE)
!p # NOT
# Element-wise logical AND (&)
p&q
p&!q
# Element-wise logical OR (|)
p|q
# Element-wise exclusive OR
xor(p,q)
# Logical AND
# Examines only the first element of the operands resulting into a single length logical vector
p&&q
q&&q
p&&p
# Logical OR
# Examines only the first element of the operands resulting into a single length logical vector
p||q
!p||q
p = c(TRUE, TRUE, FALSE, FALSE)
q = c(TRUE, FALSE, TRUE, FALSE)
isTRUE(FALSE)
!p # NOT
# Element-wise logical AND (&)
p&q
p&!q
# Element-wise logical OR (|)
p|q
# Element-wise exclusive OR
xor(p,q)
# Logical AND
# Examines only the first element of the operands resulting into a single length logical vector
!p&&!q
q&&q
p&&p
# Logical OR
# Examines only the first element of the operands resulting into a single length logical vector
p||q
!p||q
p = c(TRUE, TRUE, FALSE, FALSE)
q = c(TRUE, FALSE, TRUE, FALSE)
isTRUE(FALSE)
!p # NOT
# Element-wise logical AND (&)
p&q
p&!q
# Element-wise logical OR (|)
p|q
# Element-wise exclusive OR
xor(p,q)
# Logical AND
# Examines only the first element of the operands resulting into a single length logical vector
!p&&!q
q&&q
p&&p
# Logical OR
# Examines only the first element of the operands resulting into a single length logical vector
p||q
!p||!q
!(p&q)xor(!p|q)
!(p&q)xor(!p|q)
!(p&q)
(!p|q)
xor(!(p&q),(!p|q))
p = c(TRUE, TRUE, FALSE, FALSE)
q = c(TRUE, FALSE, TRUE, FALSE)
isTRUE(FALSE)
!p # NOT
# Element-wise logical AND (&)
p&q
p&!q
# Element-wise logical OR (|)
p|q
# Element-wise exclusive OR
xor(p,q)
# Logical AND
# Examines only the first element of the operands resulting into a single length logical vector
!p&&!q
q&&q
p&&p
# Logical OR
# Examines only the first element of the operands resulting into a single length logical vector
p||q
!p||!q
xor(!(p&q),(!p|q))
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
install.packages('R.utils')
#install.packages('R.utils')
R.utils::intToBin(12)
R.utils::intToHex(12)
R.utils::intToOct(12)
R.utils::intToHex(10)
#install.packages('R.utils')
R.utils::intToBin(12)
R.utils::intToHex(10)
R.utils::intToOct(12)
#install.packages('R.utils')
R.utils::intToBin(12)
R.utils::intToHex(12)
R.utils::intToOct(12)
BintoDec(12)
BinToDec(12)
install.packages('DescTools')
DescTools::BinToDec(12)
DescTools::BinToDec(c(12,132))
DescTools::BinToDec(c(10101,111))
DescTools::BinToDec(c(10101,111))
DescTools::DecToBin(c(21,7))
DescTools::BinToHex(c(10101,111))
DescTools::DecToHex(c(21,7))
DescTools::DecToOct(c(21,7))
DescTools::DecToHex(c(21,12))
DescTools::DecToHex(c(21,19))
DescTools::DecToBin(c(21,12))
DescTools::BinToDec(c(10101,1100))
DescTools::DecToBin(c(21,12))
DescTools::DecToHex(c(21,12))
DescTools::HexToDec(c(15,0c))
DescTools::DecToBin(c(21,12))
DescTools::BinToDec(c(10101,1100))
DescTools::DecToHex(c(21,12))
DescTools::HexToDec(c(15,c))
DescTools::DecToOct(c(21,7))
DescTools::DecToBin(c(21,12))
DescTools::BinToDec(c(10101,1100))
DescTools::DecToHex(c(21,12))
DescTools::HexToDec(c(15,'0c'))
DescTools::DecToOct(c(21,7))
DescTools::DecToOct(c(21,12))
DescTools::DecToBin(c(21,12))
DescTools::BinToDec(c(10101,1100))
DescTools::DecToHex(c(21,12))
DescTools::HexToDec(c(15,'0c'))
DescTools::DecToOct(c(21,12))
DescTools::OctToDec(c(21,12))
DescTools::DecToBin(c(21,12))
DescTools::BinToDec(c(10101,1100))
DescTools::DecToHex(c(21,12))
DescTools::HexToDec(c(15,'0c'))
DescTools::DecToOct(c(21,12))
DescTools::OctToDec(c(25,14))
#install.packages('DescTools')
library(DescTools)
DecToBin(c(21,12))
BinToDec(c(10101,1100))
DecToHex(c(21,12))
HexToDec(c(15,'0c'))
DecToOct(c(21,12))
OctToDec(c(25,14))
test = 11100101.0100111101
DecToOct(BintoDec(test))
test = 11100101.0100111101
DecToOct(BinToDec(test))
test = 11100101.0100111101
DecToOct(BinToDec(test))
BinToDec(test)
test = 11100101.0100111101
test = c('11100101.0100111101')
DecToOct(BinToDec(test))
BinToDec(test)
test = c('11100101')
DecToOct(BinToDec(test))
test2 = c('.0100111101')
DecToOct(BinToDec(test2))
test1 = c('11100101')
test2 = c('0100111101')
DecToOct(BinToDec(test1))
DecToOct(BinToDec(test2))
test1 = c('11100101')
test2 = c('10100111101')
DecToOct(BinToDec(test1))
DecToOct(BinToDec(test2))
temp = c('11100101')
DecToOct(BinToDec(temp))
blogdown:::preview_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::preview_site()
blogdown:::preview_site()
A = matrix(c(3,1,2,-1),2,2)
A
A = matrix(c(3,2,1,-1),2,2)
B = rbind(c(3,-1,-2),c(-4,2,1),c(1,4,-3))
B
det(A)
A = matrix(c(3,2,1,-1),2,2)
B = rbind(c(3,-1,-2),c(-4,2,1),c(1,4,-3))
det(A)
det(B)
inv(C)
C = rbind(c(1,2,3),c(2,-1,1),c(3,0,-1))
inv(C)
solve(C)
C = rbind(c(1,2,3),c(2,-1,1),c(3,0,-1))
C
solve(C)
install.packages('matlib')
library(matlib)
colnames(D) = paste0('x',1:3)
D = matrix(c(1,2,3,
1,3,6,
2,6,13), byrow=TRUE)
colnames(D) = paste0('x',1:3)
paste0('x',1:3)
1:3
#install.packages('matlib')
library(matlib)
D = matrix(c(1,2,3,
1,3,6,
2,6,13),3,3, byrow=TRUE)
colnames(D) = paste0('x',1:3)
d = c(1,1,5)
#install.packages('matlib')
library(matlib)
D = matrix(c(1,2,3,
1,3,6,
2,6,13),3,3, byrow=TRUE)
colnames(D) = paste0('x',1:3)
d = c(1,1,5)
showEqn(D,d)
# Check ranks
c(R(D), R(cbind(D,d)))
# Check ranks
c(R(D), R(cbind(D,d)))
all.equal(c(R(D), R(cbind(D,d)))
)
# Check ranks
c(R(D), R(cbind(D,d)))
all.equal(c(R(D), R(cbind(D,d))))
all.equal(c(R(D), R(cbind(D,d))))
# Check ranks
c(R(D), R(cbind(D,d)))
all.equal(R(D), R(cbind(D,d)))
solve(D,d)
echelon(D, d, verbose=TRUE, fractions=TRUE)
plotEqn3d(D,d)
plotEqn3d(D,d)
HexToDec(111)
DecToBin(273)
